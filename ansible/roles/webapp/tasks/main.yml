---
- name: test
  block:
     - name: install mysql repo deb
       apt:
         deb: "{{ mysql_config_link }}"

     - name: ensure mysql upstream repository package is configured
       debconf:
         name: mysql-apt-config
         question: mysql-apt-config/select-product
         value: Ok
         vtype: select


     - name: update repositories cache
       apt:
         update_cache: yes

     - name: install dependencies
       apt:
         name: "{{ packages }}"
       vars:
         packages:
         - apache2
         - mysql-community-server
         - php
         - php-mysql
         - python-mysqldb

  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


- name: install mysql 
  yum:
    name: "{{ mysql_config_link_rpm }}"
    state: present



- name: ensure a list of packages installed
  yum:
    name: "{{ packages }}"
    state: removed
  vars:
    packages:
    - mod_php70u 
    - php70u-cli 
    - php70u-mysqlnd 
    - php70u-pdo
    - php70u-common



- name: ensure a list of packages installed
  yum:
    name: "{{ packages }}"
  vars:
    packages:
    - httpd
    - mysql-server
    - php
    - php-mysql
    - php-pdo
    - MySQL-python



- name: ensure a list of packages installed
  yum:
    name: "{{ packages }}"
    state: removed
  vars:
    packages:
    - php-cli
    - mod_php
    - php-common




- name: install php7
  shell: |
    #!/bin/bash
    curl 'https://setup.ius.io/' -o setup-ius.sh
    chmod +x setup-ius.sh
    ./setup-ius.sh
  ignore_errors: yes




- name: ensure a list of packages installed
  yum:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - mod_php70u
    - php70u-cli
    - php70u-mysqlnd





- name: start mysql
  service:
    name: mysqld
    state: started



- name: remove root password
  shell: |
     #!/bin/bash

     if [[ $(grep "^default-authentication-plugin=mysql_native_password" /etc/my.cnf | wc -l) == 0 ]]; then
       
        echo "default-authentication-plugin=mysql_native_password" >> /etc/my.cnf
        temp_password=$(grep 'temporary password' /var/log/mysqld.log | awk 'NF>1{print $NF}')
        mysql -u root --connect-expired-password -p"${temp_password}" -N -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'RKTwC2gfWU2e58mrz8px*';"
        mysql -u root -p'RKTwC2gfWU2e58mrz8px*' -N -e "UNINSTALL COMPONENT 'file://component_validate_password';"
        mysql -u root -p'RKTwC2gfWU2e58mrz8px*' -N -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '';"

     fi



- name: start mysql
  service:
    name: mysqld
    state: restarted



- name: import schema
  mysql_db:
    name: hope_matters
    state: import
    target: "{{ ansible_base }}/source_code/database_schema.sql"

- mysql_user:
    name: "{{ initial_user }}"
    password: "{{ initial_password }}"
    host: '%'
    priv: '*.*:ALL,GRANT'
    state: present

- mysql_user:
    name: php
    password: "{{ php_password }}"
    priv: 'hope_matters.*:SELECT,UPDATE,INSERT/hope_matters.diagnoses:DELETE/hope_matters.diagnoses_temp:DELETE/hope_matters.treatment_temp:DELETE/hope_matters.return_treatment_temp:DELETE'
    state: present


- name: add the first user
  shell: | 
    #!/bin/bash
    
    result=$(mysql --user=root --password=$password -N -e "SELECT count(*) from hope_matters.accounts;")

    if [ $result -eq 0 ]; then

        password_hash=$(htpasswd -bnBC 10 "" {{ initial_password }} | tr -d ':\n')

        # insert the program admin account into the accounts table
        mysql --user=root --password=$password -e "INSERT INTO hope_matters.accounts (username, master_log_access, server_admin, password, created_by) VALUES ('{{ initial_user }}', 'yes', 'yes', '${password_hash}', 'system');"

    fi


- name: copy source_code files
  shell: |
    cp -r {{ ansible_base }}/source_code/* /var/www/html/

- template:
    src: "{{ ansible_base }}/source_code/php/database_credentials.php"
    dest: /var/www/html/php/database_credentials.php


- name: set permissions
  shell: |
    chmod -R 2777 /var/www/html

- name: debian apache
  block:


    - name: get php ini
      shell: | 
        #!/bin/bash
        find /etc -name php.ini | grep 'apache'
      register: php_ini

    - debug: msg="{{ php_ini.stdout }}"


    - lineinfile:
       path: "{{ php_ini.stdout }}"
       regexp: '^post_max_size ='
       line: 'post_max_size = 20000M'

    - lineinfile:
       path: "{{ php_ini.stdout }}"
       regexp: '^upload_max_filesize ='
       line: 'upload_max_filesize = 20000M'

    - lineinfile:
       path: /etc/apache2/apache2.conf
       regexp: 'Options Indexes FollowSymLinks'
       line: 'Options FollowSymLinks'

    - lineinfile:
        path: /etc/apache2/apache2.conf
        regexp: 'Options Indexes FollowSymLinks'
        line: 'Options FollowSymLinks'

    - name: reload apache2
      service:
        name: apache2
        state: reloaded
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'



- name: get php ini
  shell: |
        #!/bin/bash
        find /etc -name php.ini 
  register: php_ini
  
- debug: msg="{{ php_ini.stdout }}"





- lineinfile:
    path: "{{ php_ini.stdout }}"
    regexp: '^post_max_size ='
    line: 'post_max_size = 20000M'

- lineinfile:
    path: "{{ php_ini.stdout }}"
    regexp: '^upload_max_filesize ='
    line: 'upload_max_filesize = 20000M'

- lineinfile:
    path: /etc/httpd/conf/httpd.conf
    regexp: 'Options Indexes FollowSymLinks'
    line: 'Options FollowSymLinks'

- lineinfile:
    path: /etc/httpd/conf/httpd.conf
    regexp: 'Options Indexes FollowSymLinks'
    line: 'Options FollowSymLinks'








- firewalld:
    service: http
    permanent: true
    state: enabled

- name: reload apache2 cent
  service:
    name: httpd
    state: started




