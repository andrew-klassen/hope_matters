---


- name: (deb) package setup
  block:

     - name: (deb) install mysql repo deb
       apt:
         deb: "{{ mysql_config_link }}"

     - name: (deb) ensure mysql upstream repository package is configured
       debconf:
         name: mysql-apt-config
         question: mysql-apt-config/select-product
         value: Ok
         vtype: select

     - name: (deb) update repositories cache
       apt:
         update_cache: yes

     - name: (deb) install dependencies
       apt:
         name: "{{ packages }}"
       vars:
         packages:
         - apache2
         - mysql-community-server
         - php
         - php-mysql
         - python-mysqldb

  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


- name: (rpm) mysql setup
  block:

   - name: (rpm) install mysql 
     yum:
       name: "{{ mysql_config_link_rpm }}"
       state: present

   - name: (rpm) remove possible conflicting packages for mysql
     yum:
       name: "{{ packages }}"
       state: removed
     vars:
       packages:
       - mod_php70u 
       - php70u-cli 
       - php70u-mysqlnd 
       - php70u-pdo
       - php70u-common

   - name: (rpm) install mysql and dependencies
     yum:
       name: "{{ packages }}"
     vars:
       packages:
       - httpd
       - mysql-server
       - php
       - php-mysql
       - php-pdo
       - MySQL-python
       - policycoreutils-python

   - name: (rpm) remove possible conflicting packages for php
     yum:
       name: "{{ packages }}"
       state: removed
     vars:
       packages:
       - php-cli
       - mod_php
       - php-common

   - name: (rpm) install php7 repo
     shell: |
       #!/bin/bash
       curl 'https://setup.ius.io/' -o setup-ius.sh
       chmod +x setup-ius.sh
       ./setup-ius.sh
     ignore_errors: yes

   - name: (rpm) install php7 packages
     yum:
       name: "{{ packages }}"
       state: present
     vars:
       packages:
       - mod_php70u
       - php70u-cli
       - php70u-mysqlnd

   - name: (rpm) start mysql
     service:
       name: mysqld
       state: started

   # needed for mysql moduals to work
   - name: (rpm) remove root password
     shell: |
        #!/bin/bash

        if [[ $(grep "^default-authentication-plugin=mysql_native_password" /etc/my.cnf | wc -l) == 0 ]]; then
       
           echo "default-authentication-plugin=mysql_native_password" >> /etc/my.cnf
           temp_password=$(grep 'temporary password' /var/log/mysqld.log | awk 'NF>1{print $NF}')
           mysql -u root --connect-expired-password -p"${temp_password}" -N -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'RKTwC2gfWU2e58mrz8px*';"
           mysql -u root -p'RKTwC2gfWU2e58mrz8px*' -N -e "UNINSTALL COMPONENT 'file://component_validate_password';"
           mysql -u root -p'RKTwC2gfWU2e58mrz8px*' -N -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '';"

        fi

   - name: (rpm) change default encyption for mysql
     lineinfile:
       path: /etc/my.cnf
       line: "block_encryption_mode=aes-256-cbc"

   - name: (rpm) restart mysql
     service:
       name: mysqld
       state: restarted

  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


- name: import database schema
  mysql_db:
    name: hope_matters
    state: import
    target: "{{ ansible_base }}/source_code/database_schema.sql"

# initial admin user for the database
# (note) this only creates the user for you, you still need to allow mysql through the firewall and uncomment bind-address 127.0.0.1 in the config
# this is not done automatically for security reasons
- mysql_user:
    name: "{{ initial_user }}"
    password: "{{ initial_password }}"
    host: '%'
    priv: '*.*:ALL,GRANT'
    state: present
  ignore_errors: yes

- mysql_user:
    name: php
    password: "{{ php_password }}"
    priv: 'hope_matters.*:SELECT,UPDATE,INSERT/hope_matters.diagnoses:DELETE/hope_matters.diagnoses_temp:DELETE/hope_matters.treatment_temp:DELETE/hope_matters.return_treatment_temp:DELETE/hope_matters.secrets:DELETE/hope_matters.secret_values:DELETE/hope_matters.secret_values_temp:DELETE'
    state: present
  ignore_errors: yes

- name: add the initial program user, this user will be an admin
  shell: | 
    #!/bin/bash
    
    result=$(mysql --user=root --password=$password -N -e "SELECT count(*) from hope_matters.accounts;")

    if [ $result -eq 0 ]; then

        password_hash=$(htpasswd -bnBC 10 "" {{ initial_password }} | tr -d ':\n')

        # insert the program admin account into the accounts table
        mysql --user=root --password=$password -e "INSERT INTO hope_matters.accounts (username, master_log_access, server_admin, password, created_by) VALUES ('{{ initial_user }}', 'yes', 'yes', '${password_hash}', 'system');"

    fi

- name: copy source_code files
  shell: |
     #!/bin/bash
     cp -r {{ ansible_base }}/source_code/* /var/www/html/

- template:
    src: "{{ ansible_base }}/source_code/php/database_credentials.php"
    dest: /var/www/html/php/database_credentials.php

- name: set permissions
  shell: |
    #!/bin/bash
    chmod -R 2777 /var/www/html


- name: (deb) apache and php configuration
  block:

    - name: (deb) find the php.ini
      shell: | 
        #!/bin/bash
        find /etc -name php.ini | grep 'apache'
      register: php_ini

    # increase the max size allowed for file uploads
    - lineinfile:
       path: "{{ php_ini.stdout }}"
       regexp: '^post_max_size ='
       line: 'post_max_size = 20000M'

    - lineinfile:
       path: "{{ php_ini.stdout }}"
       regexp: '^upload_max_filesize ='
       line: 'upload_max_filesize = 20000M'

    # prevent apache from allowing unauthorized users from browsing uploaded files and update scripts
    - lineinfile:
       path: /etc/apache2/apache2.conf
       regexp: 'Options Indexes FollowSymLinks'
       line: 'Options FollowSymLinks'

    - lineinfile:
        path: /etc/apache2/apache2.conf
        regexp: 'Options Indexes FollowSymLinks'
        line: 'Options FollowSymLinks'

    - name: (deb) reload apache2
      service:
        name: apache2
        state: reloaded
    
    - name: (deb) enable apache2
      service:
        name: apache2
        enabled: yes
    
    - name: (dep) change default encyption for mysql
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        line: "block_encryption_mode=aes-256-cbc"

    - name: (deb) enable mysql
      service:
        name: mysql
        enabled: yes

    - name: (deb) restart mysql
      service:
        name: mysql
        state: restarted

  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


- name: (rpm) apache and php config, service enables, and selinux
  block:

   - name: (rpm) find php.ini
     shell: |
           #!/bin/bash
           find /etc -name php.ini 
     register: php_ini
  
   # increase the max size allowed for file uploads
   - lineinfile:
       path: "{{ php_ini.stdout }}"
       regexp: '^post_max_size ='
       line: 'post_max_size = 20000M'

   - lineinfile:
       path: "{{ php_ini.stdout }}"
       regexp: '^upload_max_filesize ='
       line: 'upload_max_filesize = 20000M'

   # prevent apache from allowing unauthorized users from browsing uploaded files and update scripts
   - lineinfile:
       path: /etc/httpd/conf/httpd.conf
       regexp: 'Options Indexes FollowSymLinks'
       line: 'Options FollowSymLinks'

   - lineinfile:
       path: /etc/httpd/conf/httpd.conf
       regexp: 'Options Indexes FollowSymLinks'
       line: 'Options FollowSymLinks'

   - firewalld:
       service: http 
       zone: public
       immediate: yes 
       permanent: true
       state: enabled

   - name: (rpm) start apache
     service:
       name: httpd
       state: started

   - name: (rpm) enable mysqld
     service:
       name: mysqld
       enabled: yes

   - name: (rpm) enable apache
     service:
       name: httpd
       enabled: yes

   - sefcontext:
       target: '/var/www/html/uploaded_images(/.*)?'
       setype: httpd_sys_rw_content_t
       state: present

   - name: (rpm) reload selinux context lables
     shell: | 
       #!/bin/bash
       restorecon -R -v /var/www/html/uploaded_images

  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: (testing) only for test builds
  block:

   - name: (testing) disable login_check(), allows for unauthorized logins
     shell: |
       #!/bin/bash
       
       if [[ $(grep "header( 'Location: ../../index.html' );" /var/www/html/php/database_credentials.php | wc -l) != 0 ]]; then
          
          start=$(grep -Fn 'function login_check() {' /var/www/html/php/database_credentials.php | cut -f1 -d':')
          start=$((${start} + 1))
          end=$((${start} + 3))
          sed -i /var/www/html/php/database_credentials.php -re "${start},${end}d"    
       
       fi
     args:
       executable: /bin/bash

   - name: (testing) disable master_log_check(), allows for unauthorized logins
     shell: |
       #!/bin/bash

       if [[ $(grep "header( 'Location: ../dashboard.php' );" /var/www/html/php/database_credentials.php | wc -l) != 0 ]]; then

          start=$(grep -Fn 'function master_log_check() {' /var/www/html/php/database_credentials.php | cut -f1 -d':')
          start=$((${start} + 1))
          end=$((${start} + 3))
          sed -i /var/www/html/php/database_credentials.php -re "${start},${end}d"

       fi
     args:
       executable: /bin/bash
 
   - lineinfile:
       path: /var/www/html/php/labs/insert_lab_form.php
       line: "$client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"

   - lineinfile:
       path: /var/www/html/php/master_log/update_payment.php
       line: "$choosen_payment_id = $_SESSION['choosen_payment_id']; if (isset($_POST['choosen_payment_id'])) {echo $choosen_payment_id = $_POST['choosen_payment_id'];}"
       regexp: "'choosen_payment_id'"
   
   - lineinfile:
       path: /var/www/html/php/master_log/insert_payment.php
       line: "$client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"
   
   - lineinfile:
       path: /var/www/html/php/master_log/change_payment.php
       line: "$choosen_payment_id = $_SESSION['choosen_payment_id']; if (isset($_POST['choosen_payment_id'])) {echo $choosen_payment_id = $_POST['choosen_payment_id'];}"
       regexp: "'choosen_payment_id'"
 
   - lineinfile:
       path: /var/www/html/php/treatment_form/insert_treatment_form_temp.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/treatment_form/add_treatment_form_diagnoses.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/treatment_form/add_treatment_form_diagnoses.php
       line: "$choosen_client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$choosen_client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"

   - lineinfile:
       path: /var/www/html/php/treatment_form/insert_treatment_form.php
       line: "$choosen_client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$choosen_client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"

   - lineinfile:
       path: /var/www/html/php/treatment_form/insert_treatment_form.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/return_treatment_form/insert_return_treatment_form_temp.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/return_treatment_form/add_return_treatment_form_diagnoses.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/return_treatment_form/add_return_treatment_form_diagnoses.php
       line: "$choosen_client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$choosen_client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"

   - lineinfile:
       path: /var/www/html/php/return_treatment_form/insert_return_treatment_form.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/return_treatment_form/insert_return_treatment_form.php
       line: "$choosen_client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$choosen_client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"

   - lineinfile:
       path: /var/www/html/php/vital_signs/insert_vital_signs.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/vital_signs/insert_vital_signs.php
       line: "$choosen_client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$choosen_client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"

   - lineinfile:
       path: /var/www/html/php/medication_order/insert_medication_order.php
       line: "$username = $_SESSION['username']; if (isset($_POST['username'])) {$username = $_POST['username'];}"
       regexp: "'username'"

   - lineinfile:
       path: /var/www/html/php/medication_order/insert_medication_order.php
       line: "$choosen_client_id = $_SESSION['choosen_client_id']; if (isset($_POST['choosen_client_id'])) {$choosen_client_id = $_POST['choosen_client_id'];}"
       regexp: "'choosen_client_id'"

   - name: (testing) import diagnoses
     mysql_db:
       name: hope_matters
       state: import
       target: "/root/hope/jenkins/diagnosis_types.sql"

   - name: (testing) install dos2unix
     apt:
       name: "{{ packages }}"
     vars:
       packages:
       - dos2unix

   - name: (testing) convert changed files into unix format
     shell: |
       #!/bin/bash
       dos2unix /var/www/html/php/labs/insert_lab_form.php
       dos2unix /var/www/html/php/master_log/update_payment.php
       dos2unix /var/www/html/php/master_log/insert_payment.php
       dos2unix /var/www/html/php/master_log/change_payment.php
       dos2unix /var/www/html/php/treatment_form/insert_treatment_form_temp.php
       dos2unix /var/www/html/php/treatment_form/add_treatment_form_diagnoses.php
       dos2unix /var/www/html/php/treatment_form/insert_treatment_form.php
       dos2unix /var/www/html/php/return_treatment_form/insert_return_treatment_form_temp.php
       dos2unix /var/www/html/php/return_treatment_form/add_return_treatment_form_diagnoses.php
       dos2unix /var/www/html/php/return_treatment_form/insert_return_treatment_form.php
       dos2unix /var/www/html/php/vital_signs/insert_vital_signs.php
       dos2unix /var/www/html/php/medication_order/insert_medication_order.php

  when: testing|default(false)|bool
